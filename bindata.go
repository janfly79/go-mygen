// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// assets/tpl/curd.tpl
// assets/tpl/e.tpl
// assets/tpl/entity.tpl
// assets/tpl/example.tpl
// assets/tpl/init.tpl
// assets/tpl/markdown.tpl
// assets/tpl/tables.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6b\xeb\x56\x10\x5d\xcb\xe0\xff\x30\xd5\x22\x48\x8d\x90\xa1\x2d\x5d\xa4\x78\x91\x3a\x6e\x6b\x70\x5d\x12\x3b\xdd\x84\x10\x14\x69\x94\x8a\xca\xf7\x3a\x57\x57\xb5\x8b\x10\x74\x19\x0a\x6d\x57\x49\x29\xa5\x90\x40\x17\x5d\x95\x2c\x0a\x59\x84\xfe\x1c\x9b\xf4\x5f\x94\xfb\x61\x5b\x71\xa4\xe7\x3c\xe2\xf7\x78\x0a\xc1\xc8\xf7\x63\xce\x9c\x33\x67\xc6\xf5\x9a\x4f\x49\xc2\xc1\xaa\xd7\x00\x00\xb2\xcc\xed\x73\x96\xfa\x7c\xe0\x9d\xc6\xd8\xf3\x86\x98\xe7\x27\x7b\x9f\x42\x13\x4c\x9f\x0e\x23\xdf\xac\xd7\xec\x7a\xad\xf8\xd7\x68\xc0\xec\xee\x7e\xfa\xe3\x75\xbd\x16\xa6\xc4\x87\xdd\x20\xb0\x7c\x3e\x01\x9f\x12\x8e\x13\xee\xb6\xd4\xa7\x03\xdf\x79\x71\x8a\xa5\x01\x6c\x2b\xf6\x12\xde\x09\x20\x22\xfc\xe3\x8f\x1c\x40\xc6\xc4\x3f\x65\x36\x64\x0a\x96\x4f\x09\x81\x9d\x26\x04\xa7\xee\xe7\xc8\xc5\xfd\x4e\x15\x54\x5b\x9d\x48\xce\x63\x71\xc0\xec\xf4\xfa\xed\x83\x01\x74\x7a\x83\xaf\xc4\x89\xc2\x5e\xb0\xb2\xcc\xed\x90\x04\x19\xff\x2c\xc2\x38\xe8\x46\x09\xcf\x73\x1b\x4c\xd8\x56\x57\x88\xc7\xfc\x7a\xb7\x7b\xd8\xee\x17\xf6\x7e\xe9\xb1\x6f\xf3\xdc\x36\xd5\x9e\x73\x8d\xaa\xbf\xdf\x55\xcb\x96\xf9\x38\x8a\xe9\x08\x28\x1a\x14\xc3\x44\x65\xb7\xd3\x94\x29\xb9\xed\x09\xfa\x9a\x20\x95\xd4\xb9\xb3\x8c\x9d\x65\xcc\x23\x67\x08\x3a\x70\x87\x84\x34\xcf\x25\x8b\x6e\x96\xb9\x5f\xa4\xc3\x91\x0a\xe1\x34\x1a\x22\xb5\x16\x1d\x0e\x91\xf0\x3c\x2f\xde\x80\x24\xc8\x73\x1d\x3d\x0a\x65\xec\xf7\x9a\x40\xa2\x78\xce\xac\x82\xc5\x53\x46\xd4\xbb\x3e\xad\x04\x71\xe0\x04\x9a\x02\xb5\xdb\x15\xef\x0a\x46\x60\x2d\xb2\x51\xc7\x72\x5d\x06\xd3\x8b\xeb\xff\x7e\xfb\x73\xfa\xd3\xe5\xec\x8f\x9b\x87\xbf\x6f\xa7\xff\x5e\xea\x92\xd8\xc3\xb8\xbc\x24\xc6\xdf\x20\x43\x48\x38\x8b\xc8\x99\x03\x1e\x3b\x4b\xe0\xe8\x38\x22\x1c\x59\xe8\xf9\x98\xe5\x36\x58\x2f\xad\x05\x63\x5e\x08\x01\xc6\xc8\x11\x42\x46\x87\xab\x85\x60\xc2\xb6\x82\x52\xaf\x19\x05\x41\xf7\xe4\x89\x4a\x41\xeb\x35\xe3\x44\xa9\x59\x2d\xa6\xcc\xc9\x75\xdd\x0a\xc6\x1e\x7e\xbe\x9b\xfe\x72\x55\xc2\x98\x4e\xec\x29\x63\xa1\xa8\xd4\x64\x41\xd9\x5a\x02\x2d\x46\xc7\xa5\xec\x14\x5d\xf6\x12\x93\x0d\x70\xc2\x25\xbf\x09\xc6\xe8\x73\xc9\xa5\x06\xb9\x0d\xe6\x3a\xba\x57\x2c\xd4\x97\x77\x94\x33\x2e\x02\xe9\xb0\x05\xce\xf7\x53\x64\xdf\x1f\xd0\x71\x15\xef\x6e\xdf\xf7\x88\xb5\x2c\x75\xf1\x18\xc6\xc2\x59\xbd\x34\x8e\xa5\xf9\x13\xe5\xae\x2d\x46\xc7\xcf\x35\xd7\xfc\xaa\xa2\xc5\x56\x05\x9e\xfd\xfe\xcf\xec\xea\x56\x8b\x7a\x38\x0a\x3c\x8e\xe5\xba\xa6\x72\xad\xcf\xd9\x6b\x48\xbb\xa1\x36\xb9\x50\x50\x61\x58\x55\x2b\x41\x25\xea\x12\xa1\xd0\xb5\x5a\x43\x9d\xe5\x3a\x0d\x5f\x6a\x9d\xe9\xc5\xaf\x0f\x37\x7f\x69\x66\x45\xeb\xde\x9c\x5f\x92\x03\x4c\xd2\x98\xc3\xd1\xf1\x3a\xe3\x6c\x86\xf7\xb7\xe8\x1c\x91\xdd\xe3\x09\x24\x0d\xf4\x6a\xea\x4b\xe7\x86\x61\x14\xa7\x86\xa1\x7d\x11\x60\x88\x4c\x46\x71\x5b\x31\x4d\xd0\x92\x7d\x52\xac\x84\x54\x7f\xdf\x13\x81\xec\x47\xe3\x87\x8e\x05\x9c\x32\xc2\xb2\x82\xdf\x34\x8c\xa6\xba\xa6\xc4\xd7\x1b\x73\x75\xa9\xc3\x97\x5b\xec\x4f\x2a\xe6\xe8\xea\x2c\x2d\xcc\xd3\x39\xf9\xba\xb4\x9a\xe0\x8d\x46\x48\x82\x42\xb9\x39\x62\xdd\x5e\x0c\xe1\x62\xa7\x93\x09\xb7\x19\x5b\xb2\xf9\xa4\xcf\xfc\x70\x3f\xbb\x9c\xf7\x99\x16\x4d\x49\x85\x1d\x9e\x31\x70\x39\xe5\x5e\x2c\x7e\x89\x7d\xf8\xc1\x9b\x9a\x11\xbe\x04\xf8\xbe\xfd\x8e\x4c\x87\x2d\x99\x72\x39\xb7\xff\x07\x00\x00\xff\xff\x2a\x55\x3a\x39\x1f\x0b\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 2847, mode: os.FileMode(420), modTime: time.Unix(1608893344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplETpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6b\xd4\x4e\x18\xc6\xcf\x1b\xc8\x77\x78\xd9\xc3\x9f\xe4\x4f\x98\xdc\x2b\x9e\x34\xde\xdc\x83\x0a\x9e\x27\xf1\x4d\x36\x34\x9b\xd9\xbe\x33\x61\x95\x25\x07\x65\x29\x2b\x28\xf4\xa0\xd2\xed\xa9\x42\x29\x78\xb0\xf1\xb8\x4a\xc5\x2f\xb3\x93\x6d\x4f\x7e\x05\x99\x64\xe3\xb6\x2a\x0a\x82\xa7\xf0\x3c\x79\x92\xe7\xf7\x0c\x93\x8e\xc6\x82\x14\x38\xb6\xd5\xeb\x3f\xe2\x8a\x87\x5c\xa2\x2f\xf7\xb2\xbe\x6d\x19\x2b\x49\xd5\xb0\x08\x59\x24\x46\xfe\x78\x37\xf1\x91\x48\x90\xec\xdb\x96\x6b\x5e\xfb\x3e\xe8\xf3\x67\x7a\xb9\xd4\x67\x47\xab\x8f\xcf\x6d\x4b\x3d\x19\x23\x04\x20\x15\x15\x91\x82\xa9\x6d\x95\x26\x16\x17\x79\x04\x03\x9c\x04\x8e\x0b\xff\x07\xc6\xee\x11\xaa\x82\x72\xf8\x2f\x98\x96\x9b\x90\xef\xc3\xc5\xd9\x07\xfd\xf9\xb5\x3e\xde\xaf\x8f\xe7\x9b\xaf\x1c\x84\xc0\x85\xfb\x8a\x47\xbb\x0e\x12\x41\xd3\xef\xb6\x8f\xe6\x47\x69\x0c\xa1\x07\x88\xb0\x73\x13\x90\xa5\x72\x50\x64\x99\x49\xba\x37\x20\x6c\x02\x5d\x15\xa2\x6d\xf5\x4a\xc0\x4c\xe2\x75\xbf\x59\xc4\x1e\xa6\x6a\xb8\xa9\x41\xd7\x24\xb7\x58\x2d\xd0\xe5\x62\xa6\x97\xa7\xab\x2f\x6f\xeb\xa7\xd5\xcf\x70\x77\x65\xb2\xe5\xf3\x60\x24\x13\x73\x08\x69\x9e\xfc\x1d\x2b\xd1\xef\x61\x89\x8f\x1d\xc4\xa6\xe7\x8f\xb0\x10\x0b\x1a\x71\xf5\x4b\xe6\x3b\x57\xa1\xdb\xdc\x86\xdb\x03\x4e\x89\x04\xc6\x58\x9a\x2b\xa4\x98\x47\x38\x2d\xff\xd9\x98\xb8\x59\xd3\x02\xb4\xcd\x8c\xb1\x1f\x97\xcd\x4f\xea\x37\xef\xeb\xc3\x4a\x1f\x9c\xd6\x87\xd5\xfa\xdd\xa7\xf5\xd1\xec\xf2\xd5\xe2\xa2\xaa\xbe\x9e\xbf\xd0\xf3\xc5\x6a\xf9\x52\x9f\xcc\xd6\x07\xfb\xd7\xa6\x6e\xc9\xba\xcb\xe3\x84\x42\x64\x5e\xa7\x0c\x91\x9c\xa4\x2a\x1a\x1a\xa7\x91\x11\x97\x08\x72\x2f\x63\x01\xd1\x40\xdc\x13\x13\xe9\x75\xf2\x96\xc8\xf3\xdb\x22\xc7\xef\xc6\x83\xc7\x46\xee\x5c\x99\xa5\xa8\x40\xaf\x5b\xbd\xbd\xea\x31\xcf\x64\xe7\x97\xb6\xf5\x2d\x00\x00\xff\xff\x3e\xa9\x79\x47\x77\x03\x00\x00")

func assetsTplETplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplETpl,
		"assets/tpl/e.tpl",
	)
}

func assetsTplETpl() (*asset, error) {
	bytes, err := assetsTplETplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/e.tpl", size: 887, mode: os.FileMode(420), modTime: time.Unix(1608202696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\xaa\xae\xd6\x0b\x49\x4c\xca\x49\x75\xce\xcf\xcd\x4d\xcd\x2b\xa9\xad\xe5\xe5\x2a\xa9\x2c\x48\x55\x80\x89\xd7\xd6\x2a\x14\x97\x14\x95\x26\x97\x28\x54\x83\x14\x17\x25\xe6\xa5\xa7\x2a\xa8\x64\xe9\x28\xa8\x64\x96\xa4\xe6\x2a\x58\xd9\x2a\xe8\xb9\x65\xa6\xe6\xa4\x14\xd7\xd6\x56\x57\x83\xc5\xf4\xfc\x12\x73\x41\xda\x20\x00\x26\x18\x52\x59\x00\x15\x84\x89\xb8\xe5\x17\xe5\x26\x96\xc0\x34\x2b\xa0\xa9\x0f\x4a\xcd\x4d\x2c\xca\x06\x39\xa7\xba\x3a\x35\x2f\x05\xc4\xa8\xe5\xe5\x02\x04\x00\x00\xff\xff\x1d\x85\xad\x27\xb0\x00\x00\x00")

func assetsTplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplEntityTpl,
		"assets/tpl/entity.tpl",
	)
}

func assetsTplEntityTpl() (*asset, error) {
	bytes, err := assetsTplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/entity.tpl", size: 176, mode: os.FileMode(420), modTime: time.Unix(1608619082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x6d\x6b\xdc\x46\x10\xfe\x2e\xd0\x7f\xd8\x0a\xee\x22\x99\x8b\xe4\xd4\x49\x09\x82\xa3\xed\xbd\x84\x06\x92\xd4\xc5\x2e\xfd\x50\x4a\xd8\x93\xf6\xee\x16\x4b\xbb\xba\xdd\x55\x1a\xd7\x18\x2e\x50\x9a\x84\x24\x76\x20\x4d\x02\xad\xd3\x77\xf7\x85\x42\xed\x0f\xa5\x31\x97\x94\xfe\x19\x4b\x67\xff\x8b\x32\x92\xee\xcd\x75\x8a\x69\x09\xe4\xdb\xec\xec\xcc\xce\xcc\xf3\x3c\xb3\x11\xf6\x56\x70\x87\xa0\x70\x55\xf6\x02\x5d\xd3\x35\x1a\x46\x5c\x28\x64\xea\x9a\xe1\x63\x85\x5b\x58\x12\x47\xf6\x02\x43\xd7\x8c\x76\xa8\x0c\x5d\xbb\x8a\x8c\x0e\x55\xdd\xb8\x65\x7b\x3c\x74\x3a\xfc\xb4\xec\x05\xa7\x7d\x41\xaf\x11\xe1\x64\xaf\x40\xa8\x22\x52\x51\xd6\x01\x53\x2a\x41\x59\x47\x82\xc9\x88\x72\x62\x01\x01\x16\x94\x52\xab\x11\x41\x8d\x5a\x9d\xb3\x36\xed\x34\x99\xa2\x6a\x15\x49\x25\x62\x4f\xa1\x35\x5d\x7b\x87\x4b\x85\x10\x42\x79\x3e\x72\x9c\x64\x6b\x37\x79\xd2\xd7\xb5\x45\xe8\x0f\x21\x44\x99\x42\x8e\x33\xfc\x75\x27\xd9\xfc\x5e\xd7\xae\xe0\x90\xcc\x84\x0f\x3f\xff\x39\xbd\xf5\x54\xd7\x16\xb1\x94\xb3\xef\xec\x7c\x36\xfc\xe6\x86\xae\x35\x6a\x79\xce\xe4\x62\xf0\x20\xb9\x7f\x4f\xd7\xea\x5d\x2c\x24\x51\x53\x4f\x3d\x7f\x94\x65\x2c\xd3\x90\x7c\xc2\x19\x99\xdc\xa4\x8f\xff\x48\xee\x0e\x74\xed\x32\xbe\x7e\xd1\x0f\x48\xd1\x53\xba\xd5\x4f\x7e\xf8\x69\xf8\xcb\xe0\xf0\xf1\xef\x07\x7f\x7d\x95\x6e\x6c\x67\x11\xef\x46\x84\xcd\x44\xe4\x77\xe9\xc3\x5d\x5d\x5b\x07\x40\x1c\x07\x8d\x5d\xe9\xbd\xdf\x92\xc1\x03\x5d\x6b\xc7\xcc\x43\x17\x19\x55\x8d\x9a\xe9\xb5\x3b\x47\xf0\xb2\xd0\x9c\xec\x05\x76\xa3\x06\x88\xd1\x76\xd1\x98\xb4\x9b\xbd\x18\x07\x17\x78\xe0\x43\x8e\x3d\xea\xbb\x82\x0c\xc3\x82\xc8\x69\x27\xaa\x22\xe3\xd4\xdb\x92\x62\x67\xa9\x8b\x59\xa7\x8b\xe9\x29\x23\xeb\xc7\x97\x0c\xb9\x55\xd4\x0e\x95\xbd\x14\x09\xca\x54\xdb\x34\x4a\xd2\x2d\xc9\xb7\x94\x17\x99\x60\xf9\x96\x53\x92\x6f\x7a\x39\x5c\xd5\x92\x2c\x47\x60\xc1\xc3\x55\x25\x62\x52\x0e\xb8\x57\xbd\xc4\x3d\x1c\x94\x15\x0d\xc9\x55\xa8\x56\x2d\x49\xa3\x92\x37\x00\xe8\x17\x26\x70\x54\x98\x40\xfb\xc8\xcb\xc5\xc8\xcc\xb9\x2a\x0e\x05\x3f\x15\x5d\x8b\x45\x60\xbf\x17\x13\xb1\xda\x94\x1e\x8e\xc8\xcc\xb0\x56\x25\x93\x99\xc7\x19\x23\x9e\xa2\x9c\x55\x10\x11\x02\x26\x02\xc4\x80\x0b\xd3\xc8\xf5\x5a\x41\xbe\x64\x56\x86\x1f\x44\xbc\x56\x45\x8c\x06\x00\x53\x84\x19\xf5\x4c\x22\x84\x95\x01\x32\x79\xca\x5e\x22\xaa\x20\xb4\xce\x19\x93\x59\xe1\xc2\x61\x1d\x13\x08\xda\x98\x09\x04\x87\xa5\x6b\x82\xa8\x58\x30\x34\x89\xcf\xea\x5c\xc3\x02\x35\x6a\x23\x66\xf3\xf3\xda\x5a\x86\xd7\xfa\x7a\xa3\x85\xe6\xc6\x87\xcb\xdc\x27\xd9\xd6\x66\x2a\xa1\x8c\xaa\xfa\xf8\x29\x73\xc4\x34\x8c\x3c\xab\x9a\x62\xbb\x5c\x23\x00\x72\xba\x5c\x2a\xe0\x04\xe0\x76\x17\x16\xe6\xcf\x57\xf2\x6d\x72\x0d\xc1\x79\x7e\x83\xa5\x74\x8d\x33\xaf\x2f\x9c\x3d\xf7\x06\x9c\x73\x36\x5c\x63\x85\x32\x3f\x20\x3e\xb8\x0a\x4e\x5c\x23\x56\xed\xf3\x61\xeb\x2c\xf8\x0a\x40\xdc\x33\xf3\x95\xf1\x86\xb8\xe8\x5c\x25\x1b\xb2\x51\x43\xd5\x29\x5d\x5b\xba\x36\x3d\x62\x15\x5d\x21\x1f\x8f\x1d\x66\xa3\x66\x4d\x56\x24\xfd\x7a\xfb\x60\xe7\xbb\xf4\x76\x3f\xdd\xba\x3d\xfc\xe2\xd3\x7c\x57\x0a\x08\x96\x89\x54\xe3\xb4\x0b\x94\xf9\x1f\x74\x89\x20\xa6\x42\x73\xc5\x8f\x64\x2f\x67\xb0\x1c\x85\x4a\xd7\x5a\x9c\xaf\x00\x52\xe3\xec\x35\x28\xa6\xb8\xcf\xb3\xca\x82\xc8\x38\x50\x63\x09\x4d\xf5\x6a\x43\x19\xb3\x0c\xf9\x16\x7c\x22\x37\xff\x4c\x1f\xee\x1e\xde\xbc\x7b\xb8\xd5\x3f\xf8\xf1\x46\x7a\xe7\x79\xba\xb1\xbd\xbf\xd7\xdf\xdf\xbb\x93\xfd\xb0\xff\x10\x99\xb2\x9b\x42\x70\x31\x91\x19\x2c\xdc\x22\xec\x5b\xc0\xcc\xbc\xec\x87\xf3\x1f\xe5\x57\xf0\x41\x6c\x3c\x4d\x36\x1f\xc1\xff\x71\x7f\x63\x7f\xaf\x9f\x3e\xf9\xf6\xc5\x00\x5c\xc2\x52\x9d\x64\xf6\x7f\x1d\x4e\x48\x65\x32\x1a\x1c\xb7\x1f\x27\x68\xfd\x68\xdf\xfd\x67\x19\x3a\x9b\xc7\xb5\x5b\xe7\x31\x7b\x65\xfa\x4d\x6e\x7d\x99\x3c\x1b\xbc\x18\xdb\xba\x20\x58\x9d\x48\x59\xbe\xff\xdf\x74\x55\x54\x28\xfb\xfe\x4b\x9a\xa5\x79\x1d\x87\x51\x40\xde\x8f\xfc\x97\x3c\x49\x51\xe1\xff\x4d\xf2\x77\x00\x00\x00\xff\xff\x0f\x0d\x50\xf5\xaa\x08\x00\x00")

func assetsTplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplExampleTpl,
		"assets/tpl/example.tpl",
	)
}

func assetsTplExampleTpl() (*asset, error) {
	bytes, err := assetsTplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/example.tpl", size: 2218, mode: os.FileMode(420), modTime: time.Unix(1608202696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplInitTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xe4\x44\x14\x7d\xee\x40\xfe\xc3\x35\xd0\xb3\x89\x84\xce\x7c\xec\x2e\xd2\xd2\xb4\xf6\xcc\x8a\x82\xa3\xee\xce\xbc\x4b\x4d\x52\xe9\x2e\x36\xa9\xca\x54\x55\x86\x19\xa5\x61\x7d\x11\x1f\x5c\x15\x56\xdd\x97\x55\x04\x15\x15\xc1\xdd\x07\x51\x18\x04\x7f\x4d\xf7\xe8\xbf\x90\x5b\x55\xe9\x4e\xda\x1d\xf6\x29\xa9\x73\x4f\xdd\x8f\x53\xa7\x8a\x95\x95\x90\x1a\x42\xdf\xeb\x05\x19\xd1\xe4\x84\x28\x9a\xa8\xd3\x22\x40\x20\x2f\xb5\xf9\x72\xaa\x93\x5a\x5a\x4c\x69\xc9\xf8\x54\x05\xbe\x17\xf9\x9e\xef\x9d\x11\x69\x36\x97\x44\x69\x2a\x0f\x26\xf0\xb2\x3a\x2d\x06\x07\x13\xdf\xeb\xa9\x82\x9c\xd1\x36\x62\x36\xe4\x35\x4f\x81\x71\xa6\xc3\x08\x3e\xf4\xbd\x5e\x9a\x4f\x61\x38\x82\xec\x64\x5f\xf0\x9c\x4d\x11\xea\xbd\x29\x94\x1e\x02\x00\x04\x85\x48\x49\x31\x13\x4a\x07\x31\x06\xde\x13\xd2\x06\xf6\xf6\xb6\x6f\x1b\xe4\x1d\x52\x52\x4b\x95\x42\x34\x2c\xa2\x94\xc5\x76\x76\xf7\x6e\xde\xba\x6d\xd1\x83\x89\xe3\x06\xf7\x19\xcf\x0a\x9a\x59\x78\x7f\x46\xa4\xa2\x7a\x08\x41\xad\xf3\x57\xca\x93\x9b\x16\x3e\x24\xe7\xef\x56\x94\x0f\x61\x67\x7b\xbb\x01\xde\xca\x0a\x3a\x84\x5b\x66\x3d\x6f\xcf\x3c\x32\x03\x1d\x4c\xc2\x34\x9f\x46\xbe\xd7\x4b\x92\x66\xf6\x8d\xc8\x1c\x15\xd0\x17\x15\x5d\xcd\x0b\x4a\xcb\x3a\xd5\x46\x0a\x1c\x1b\xdb\x06\xab\x31\x24\xc9\xe2\xc9\xb3\xc5\x37\x0f\x7c\xcf\x0c\x6e\x42\x8c\x9b\x6f\x92\x5c\xfd\xfa\x74\xf1\xf9\xf7\xbe\x67\x14\xe8\xee\xba\xfa\xf2\xe7\xe5\x27\x7f\xe2\x2e\xa2\xd4\x46\xc2\xa7\x1f\x5f\x7d\xf7\x91\xef\x39\x35\x3a\xa1\xcb\x47\x8b\x2f\x1e\xfa\x5e\xa3\x48\x3b\xe1\x5f\x5f\xdb\x5d\xc7\xac\xa4\x1f\x08\x4e\xd7\xa1\xe5\xe3\x3f\x16\x9f\x5e\xfa\x5e\xa3\x4f\xab\xc3\xe5\x93\x07\x8b\x1f\x7e\xba\xfa\xe5\xf2\xdf\xc7\xbf\xff\xf3\xf7\xb7\xcb\xcf\x7e\xb4\x34\xd4\xf5\x7f\x34\x4b\x58\x7e\xf5\xcc\x89\x94\x24\xb0\x82\x96\x0f\x7f\x5b\x5c\x3e\x6a\x59\xc7\xea\xb9\xd2\x30\x6a\x2c\x66\x54\x64\xb9\xeb\x4e\x0d\xee\x9c\xd6\xa4\x78\x43\x14\x19\xd2\x07\x4d\xf3\x31\x04\x81\xf5\x5e\xaf\x0d\xc3\x08\x82\x1b\xaf\x2b\x46\x92\xa3\x19\xe1\xd3\x19\x61\x37\x02\x77\xd0\x99\xe2\xe8\xd1\xbc\xd4\x83\xa3\x4a\x32\xae\xf3\x30\xe8\xab\x61\x5f\xbd\xa6\xd3\x2a\xc4\xbf\x2c\x4a\xfa\x6a\x9c\x5a\xe5\x46\x7d\xb5\x55\xe1\x1f\xa6\x1e\x69\x59\xd3\xad\x42\xa4\xa3\xb7\xd1\xcb\x5b\x9a\x95\xf4\x7d\xac\x37\xea\x2b\x6b\x35\x6c\x02\x0f\x63\xb5\xc0\x63\x5b\x2d\xd0\x14\xeb\x88\x90\xeb\x85\x3d\xc2\xd5\xd2\x1d\x9b\x59\xd7\xb2\x18\xdc\xad\xa9\xbc\xb8\xa3\x52\x52\xd1\xce\xf8\x11\x32\xd0\xa5\x19\xcd\xa9\x04\x14\xd5\x5d\x45\x94\x8e\x4a\x89\xa3\x4a\x9a\x8a\x33\x2a\xc3\xe8\x55\x83\xbc\x34\x02\xce\x0a\x4b\x72\xac\x1d\xa4\x1d\xba\x1b\xb0\x5f\x08\x45\x1d\x79\xa7\xcb\xee\x55\x84\xb3\x34\xc4\x40\x64\x80\x79\x2b\xc9\x2e\x26\x39\xb2\x77\xa5\x9d\x63\xf7\xba\x1c\xbb\xed\x1c\x2b\xd4\x80\x88\xcd\x43\xfc\x4d\x05\xe7\x34\xd5\x4c\xf0\xb8\x99\x07\xfd\x81\xbe\x0b\x83\xf2\x02\x5f\xb7\x18\x32\xc5\x23\xeb\x96\xcd\x01\x3b\x69\xe7\x9d\x7c\x83\x23\xaa\x9d\x83\xf7\x05\xe7\xca\x08\xeb\x80\xe8\x79\x4c\xbc\x12\x1d\x26\x02\xc8\x94\x54\xd7\x92\xc3\x7a\x83\xf1\x7d\x92\x40\x8a\x32\x40\x76\xe2\xec\xbe\xa1\x30\x36\x2b\x64\xe3\xf3\xd5\x03\xd4\x6e\xdf\x65\x6e\x62\x03\xb7\xd3\xcd\xe2\xa2\x9c\x15\xd7\x14\xec\x9e\x46\xb7\x5e\xf3\xaa\x3d\xa7\x9c\x0b\xbd\xb0\x9a\x96\x84\x2b\x62\x26\x06\xa5\x89\xd4\xae\xec\xf1\xf9\x84\x4e\x19\x0f\x23\x08\xcd\x65\x3e\x3e\x8f\x6d\x6d\x6b\xcd\xcd\xa1\x1c\xb9\xc9\x2a\x69\x45\x89\x06\x49\x55\x25\xb8\xa2\xa0\x05\x8c\xe3\x71\x3c\x76\xc9\xef\x99\xf0\xdd\x9a\x2a\xac\x7b\x48\xe4\xfd\x30\x15\x35\xd7\xf8\x08\x45\xcd\x5b\xd6\x2a\xd3\xbc\x1f\xc7\x92\x95\xf7\xd8\x74\xa6\xc3\x06\xb1\x99\xc2\x60\x1c\x07\x31\x98\x1c\x51\x0c\x41\x1c\x60\x27\xff\x05\x00\x00\xff\xff\xe3\x1c\x96\xb0\x4b\x07\x00\x00")

func assetsTplInitTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplInitTpl,
		"assets/tpl/init.tpl",
	)
}

func assetsTplInitTpl() (*asset, error) {
	bytes, err := assetsTplInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/init.tpl", size: 1867, mode: os.FileMode(420), modTime: time.Unix(1608202696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(1608202696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\x05\xc9\x80\xf9\x7a\xa1\x05\x05\xa9\x45\x21\x89\x49\x39\xa9\x7e\x89\xb9\xa9\xb5\xb5\x0a\x0a\x0a\x0a\xb6\x0a\x4a\x30\x69\x24\x19\x25\x05\x7d\x7d\x05\x98\xb8\x73\x7e\x6e\x6e\x6a\x5e\x49\x6d\x6d\x75\x75\x6a\x5e\x0a\xc8\x40\x4d\x40\x00\x00\x00\xff\xff\xf6\x4d\x87\xcf\x77\x00\x00\x00")

func assetsTplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplTablesTpl,
		"assets/tpl/tables.tpl",
	)
}

func assetsTplTablesTpl() (*asset, error) {
	bytes, err := assetsTplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/tables.tpl", size: 119, mode: os.FileMode(420), modTime: time.Unix(1608202696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/e.tpl":        assetsTplETpl,
	"assets/tpl/entity.tpl":   assetsTplEntityTpl,
	"assets/tpl/example.tpl":  assetsTplExampleTpl,
	"assets/tpl/init.tpl":     assetsTplInitTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
	"assets/tpl/tables.tpl":   assetsTplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"e.tpl":        &bintree{assetsTplETpl, map[string]*bintree{}},
			"entity.tpl":   &bintree{assetsTplEntityTpl, map[string]*bintree{}},
			"example.tpl":  &bintree{assetsTplExampleTpl, map[string]*bintree{}},
			"init.tpl":     &bintree{assetsTplInitTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
			"tables.tpl":   &bintree{assetsTplTablesTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
